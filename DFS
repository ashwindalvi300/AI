from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)  # For an undirected graph, add edges in both directions.

    def dfs(self, node, visited):
        visited[node] = True
        print(node, end=' ')

        for neighbor in self.graph[node]:
            if not visited[neighbor]:
                self.dfs(neighbor, visited)

if __name__ == "__main__":
    g = Graph()
    
    num_edges = int(input("Enter the number of edges: "))
    
    for _ in range(num_edges):
        u, v = map(int, input("Enter edge (u v): ").split())
        g.add_edge(u, v)
    
    start_node = int(input("Enter the starting node for DFS: "))
    
    print("Depth-First Search starting from node", start_node, ":")
    visited = {node: False for node in g.graph}
    g.dfs(start_node, visited)




# Enter the number of edges: 5
# Enter edge (u v): 0 1
# Enter edge (u v): 0 2
# Enter edge (u v): 1 2
# Enter edge (u v): 2 3
# Enter edge (u v): 3 3
# Enter the starting node for DFS: 2


# Depth-First Search starting from node 2 :
# 2 0 1 3
